[{"/Users/abhishek/Documents/Abhishek/Dev/Web/reactJS/local-local-time/src/index.tsx":"1","/Users/abhishek/Documents/Abhishek/Dev/Web/reactJS/local-local-time/src/App.tsx":"2","/Users/abhishek/Documents/Abhishek/Dev/Web/reactJS/local-local-time/src/data/timezonedata.js":"3","/Users/abhishek/Documents/Abhishek/Dev/Web/reactJS/local-local-time/src/reportWebVitals.ts":"4","/Users/abhishek/Documents/Abhishek/Dev/Web/reactJS/local-local-time/src/pages/About.tsx":"5","/Users/abhishek/Documents/Abhishek/Dev/Web/reactJS/local-local-time/src/pages/Support.tsx":"6","/Users/abhishek/Documents/Abhishek/Dev/Web/reactJS/local-local-time/src/pages/ContactUs.tsx":"7","/Users/abhishek/Documents/Abhishek/Dev/Web/reactJS/local-local-time/src/components/NavBar.tsx":"8"},{"size":928,"mtime":1613483588483,"results":"9","hashOfConfig":"10"},{"size":7976,"mtime":1614269382914,"results":"11","hashOfConfig":"10"},{"size":26933,"mtime":1613479459291,"results":"12","hashOfConfig":"10"},{"size":425,"mtime":1613481372853,"results":"13","hashOfConfig":"10"},{"size":408,"mtime":1613763636931,"results":"14","hashOfConfig":"10"},{"size":115,"mtime":1613484256965,"results":"15","hashOfConfig":"10"},{"size":119,"mtime":1613484250780,"results":"16","hashOfConfig":"10"},{"size":544,"mtime":1613757340331,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"18ee57n",{"filePath":"21","messages":"22","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"20"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"/Users/abhishek/Documents/Abhishek/Dev/Web/reactJS/local-local-time/src/index.tsx",[],["39","40"],"/Users/abhishek/Documents/Abhishek/Dev/Web/reactJS/local-local-time/src/App.tsx",["41","42","43","44","45"],"//TODO: add geolocation \n//TODO: option to choose 24/12 hr format\n//TODO: store image in state between page links\n\nimport React, { useEffect, useState } from 'react';\nimport './App.css';\nimport { Link } from \"react-router-dom\";\n\n\nimport PlacesAutocomplete, {\n  geocodeByAddress,\n\n  getLatLng,\n} from 'react-places-autocomplete';\nimport { timezonedata } from './data/timezonedata';\nimport { NavBar } from './components/NavBar';\n\nvar moment = require('moment-timezone');\n\nconst App: React.FC = () => {\n\n  //unsplash API\n  const [downloadLink, setDownloadLink] = useState('')\n\n\n  const [address, setAddress] = useState('')\n  const [destination, setDestination] = useState('')\n  const [localLocalTime, setLocalLocalTime] = useState('')\n  const [backgroundImage, setBackgroundImage] = useState('')\n  const [photographer, setPhotographer] = useState({ username: \"\", profile_image: \"\" })\n  const [currentTZ, setCurrentTZ] = useState({\n    \"value\": \"\",\n    \"abbr\": \"\",\n    \"offset\": 0,\n    \"isdst\": false,\n    \"text\": \"\",\n    \"utc\": [\"\"]\n  })\n\n\n  const [isLoaded, setIsLoaded] = useState<boolean>(false)\n\n  //time\n  const [hours, setHours] = useState(\"0\")\n  const [minutes, setMinutes] = useState(\"0\")\n  const [seconds, setSeconds] = useState(\"0\")\n\n  //current time\n\n  const [currentHours, setCurrentHours] = useState(\"0\")\n  const [currentMinutes, setCurrentMinutes] = useState(\"0\")\n  const [currentSeconds, setCurrentSeconds] = useState(\"0\")\n\n  let [timer, setTimer] = useState<any>(null)\n  let [currentTimer, setCurrentTimer] = useState<any>(null)\n\n\n  const UTC_LONGITUDE = 0\n  const TIME_PER_LONGITUDE = 4\n  const ACCESS_KEY = 'h7eF21T9CT7IP5joCADCvTOxpCL76CDsoDgtBwIkYKg'\n\n  const currentLocationTimer = () => {\n    getCurrentTZData()\n    let currentDate = new Date();\n    // console.log(currentDate)\n\n    const hour = updateTime(currentDate.getHours())\n    const minutes = updateTime(currentDate.getMinutes())\n    const seconds = updateTime(currentDate.getSeconds())\n\n    setCurrentHours(hour)\n    setCurrentMinutes(minutes)\n    setCurrentSeconds(seconds)\n\n    // console.log(`${hour}:${minutes}:${seconds}`)\n\n    setCurrentTimer(setTimeout(() => {\n      currentLocationTimer()\n    }, 1000))\n  }\n\n  const getCurrentTZData = () => {\n    const area = moment.tz.guess(true)\n    timezonedata.map((tz, index) => {\n      tz.utc.forEach((utc, index) => {\n        if (utc === area) {\n          // console.log(\"succesful\", tz)\n          setCurrentTZ(tz)\n        }\n      })\n    })\n  }\n\n  /**\n   * \n   * @param uri: download_location\n   * \n   * helps unsplash API to keep count of the downloads of the images of the author \n   */\n  const sendDownloadRequest = async (uri: string) => {\n    await fetch(uri)\n  }\n\n\n\n  useEffect(() => {\n    /**\n     * getRandomBrackgroundImage fetches random images and its metadata from unsplash.com\n     */\n    const getRandomBackgroundImage = async () => {\n      const response = await fetch(`https://api.unsplash.com/photos/random?client_id=${ACCESS_KEY}&Accept-Version=v1&content_filter=low&orientation=landscape`)\n      const resData = await response.json()\n      console.log(resData)\n      setBackgroundImage(resData.urls.regular)\n      setPhotographer({ username: resData.user.username, profile_image: resData.user.profile_image.small })\n      sendDownloadRequest(`${resData.links.download_location}?client_id=${ACCESS_KEY}`)\n      setDownloadLink(`${resData.links.download}?force=true`)\n    }\n    getRandomBackgroundImage()\n    currentLocationTimer()\n    setIsLoaded(true)\n    return () => {\n      clearTimeout(currentTimer);\n      currentTimer = null\n    }\n  },\n    [])\n\n\n\n  const handleChange = (address: string) => {\n    setAddress(address)\n  };\n\n  const handleSelect = (address: string) => {\n    setDestination(address)\n    if (timer !== null) {\n      // console.log(timer)\n      clearTimeout(timer)\n      timer = null\n    }\n    // console.log(timer)\n    geocodeByAddress(address)\n      .then(results => getLatLng(results[0]))\n      .then(latLng => {\n        //start clock\n        currentTime(latLng.lng)\n      })\n      .catch(error => console.error('Error', error));\n  };\n\n  const updateTime = (k: number) => {\n    if (k < 10) {\n      return \"0\" + k;\n    }\n    else {\n      return k.toString();\n    }\n  }\n\n  const currentTime = (Longitude: number) => {\n\n    let currentDate = new Date();\n\n    let local_tz = ((UTC_LONGITUDE - Longitude) * TIME_PER_LONGITUDE)\n\n    const current_intl_tz = currentDate.getTimezoneOffset()\n    const diff_in_offset = current_intl_tz - local_tz;          // diff = current_tz_offset - (time zone of the selected place)\n\n    let local_time = new Date(currentDate.getTime() + (diff_in_offset * 60 * 1000))\n\n    setLocalLocalTime(local_time.toString().split(\" \").slice(0, 4).join(\" \"))\n\n\n    const hour = updateTime(local_time.getHours())\n    const minutes = updateTime(local_time.getMinutes())\n    const seconds = updateTime(local_time.getSeconds())\n\n    setHours(hour)\n    setMinutes(minutes)\n    setSeconds(seconds)\n\n    // console.log(`${hour}:${minutes}:${seconds}`)\n\n    setTimer(setTimeout(() => {\n      currentTime(Longitude)\n    }, 1000))\n  }\n\n  if (!isLoaded) {\n    return (\n      <div>loading...</div>\n    )\n  }\n\n\n  return (\n    <div className=\"App\" style={{\n      backgroundImage: `url(${backgroundImage})`, backgroundRepeat: 'no-repeat',\n\n    }}>\n      <NavBar />\n      <PlacesAutocomplete\n        value={address}\n        onChange={handleChange}\n        onSelect={handleSelect}\n      >\n        {({ getInputProps, suggestions, getSuggestionItemProps, loading }) =>\n          <div className=\"searchcontainer\">\n            <input\n              {...getInputProps({\n                placeholder: 'Search Places ...',\n                className: 'location-search-input',\n              })}\n            />\n            <div className=\"autocomplete-dropdown-container\">\n              {loading && <div>Loading...</div>}\n              {suggestions.map(suggestion => {\n                const className = suggestion.active\n                  ? 'suggestion-item--active'\n                  : 'suggestion-item';\n                // inline style for demonstration purpose\n                const style = suggestion.active\n                  ? { backgroundColor: '#ccc', cursor: 'pointer', padding: 10 }\n                  : { backgroundColor: '#fff', cursor: 'pointer', padding: 10 };\n                return (\n                  <div\n                    {...getSuggestionItemProps(suggestion, {\n                      className,\n                      style\n                    })}\n                  >\n                    <span>{suggestion.description.slice()}</span>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n          // console.log(suggestions)\n        }\n      </PlacesAutocomplete>\n      {hours !== \"0\" && minutes !== \"0\" && seconds !== \"0\" && localLocalTime.length !== 0 && <div className='datetimecontainer'>\n        <p className=\"locallocaltimestring\">local local time @ {destination}</p>\n        <h2 className=\"timer\">{hours}:{minutes}:{seconds}</h2>\n      </div>}\n      <div className=\"datetimecontainer\">\n        {currentTZ && <h3>current time:{currentTZ['text']}</h3>}\n        <h1>{currentHours}:{currentMinutes}:{currentSeconds}</h1>\n      </div>\n      <div className=\"footer\">\n        <img src={photographer.profile_image} style={{ borderRadius: 20, marginRight: 10 }} />\n        <div>\n          <a\n            href={`https://unsplash.com/@${photographer.username}`}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n            style={{ textDecorationLine: 'none', color: '#ffffff' }}>\n            @{photographer.username}\n          </a>\n          {/* <br />\n          <a\n            download=\"\"\n            href={downloadLink}\n            target=\"_blank\"\n            rel=\"nofollow\"\n            style={{ textDecorationLine: 'none', color: '#ffffff' }}>\n            Download\n          </a> */}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/abhishek/Documents/Abhishek/Dev/Web/reactJS/local-local-time/src/data/timezonedata.js",[],["46","47"],"/Users/abhishek/Documents/Abhishek/Dev/Web/reactJS/local-local-time/src/reportWebVitals.ts",[],"/Users/abhishek/Documents/Abhishek/Dev/Web/reactJS/local-local-time/src/pages/About.tsx",["48"],"import { NavBar } from '../components/NavBar';\nimport './About.css';\n\nimport WorldMapBanner from '../assets/worldtzmap.png'\n\nconst About: React.FC = () => {\n    return (\n        <div className=\"container\">\n            <NavBar />\n            <div className=\"header-banner\">\n                <img src={WorldMapBanner} height=\"400\" width=\"100%\" />\n            </div>\n        </div>\n    )\n}\n\nexport default About\n","/Users/abhishek/Documents/Abhishek/Dev/Web/reactJS/local-local-time/src/pages/Support.tsx",[],"/Users/abhishek/Documents/Abhishek/Dev/Web/reactJS/local-local-time/src/pages/ContactUs.tsx",[],"/Users/abhishek/Documents/Abhishek/Dev/Web/reactJS/local-local-time/src/components/NavBar.tsx",[],["49","50"],{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","severity":1,"message":"56","line":7,"column":10,"nodeType":"57","messageId":"58","endLine":7,"endColumn":14},{"ruleId":"55","severity":1,"message":"59","line":23,"column":10,"nodeType":"57","messageId":"58","endLine":23,"endColumn":22},{"ruleId":"60","severity":1,"message":"61","line":84,"column":34,"nodeType":"62","messageId":"63","endLine":84,"endColumn":36},{"ruleId":"64","severity":1,"message":"65","line":124,"column":22,"nodeType":"66","endLine":124,"endColumn":26},{"ruleId":"67","severity":1,"message":"68","line":251,"column":9,"nodeType":"69","endLine":251,"endColumn":95},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","replacedBy":"54"},{"ruleId":"67","severity":1,"message":"68","line":11,"column":17,"nodeType":"69","endLine":11,"endColumn":71},{"ruleId":"51","replacedBy":"70"},{"ruleId":"53","replacedBy":"71"},"no-native-reassign",["72"],"no-negated-in-lhs",["73"],"@typescript-eslint/no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'downloadLink' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react-hooks/exhaustive-deps","Assignments to the 'currentTimer' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Literal","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["72"],["73"],"no-global-assign","no-unsafe-negation"]