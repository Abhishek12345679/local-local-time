[{"/Users/abhishek/Documents/Abhishek/Dev/Web/reactJS/local-local-time/src/index.tsx":"1","/Users/abhishek/Documents/Abhishek/Dev/Web/reactJS/local-local-time/src/reportWebVitals.ts":"2","/Users/abhishek/Documents/Abhishek/Dev/Web/reactJS/local-local-time/src/App.tsx":"3"},{"size":500,"mtime":1612287274904,"results":"4","hashOfConfig":"5"},{"size":425,"mtime":1612287274908,"results":"6","hashOfConfig":"5"},{"size":6328,"mtime":1612773504541,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"18ee57n",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},"/Users/abhishek/Documents/Abhishek/Dev/Web/reactJS/local-local-time/src/index.tsx",[],["16","17"],"/Users/abhishek/Documents/Abhishek/Dev/Web/reactJS/local-local-time/src/reportWebVitals.ts",[],"/Users/abhishek/Documents/Abhishek/Dev/Web/reactJS/local-local-time/src/App.tsx",["18","19","20","21"],"//TODO: add geolocation\n//TODO: make site more responsive on mobile\n//TODO: Web UI \n//TODO: option to download background\n//TODO: option to choose 24/12 hr format\n//TODO: option to choose full or regular photo\n\nimport React, { useEffect, useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { TextField } from './components/TextField';\n\nimport PlacesAutocomplete, {\n  geocodeByAddress,\n\n  getLatLng,\n} from 'react-places-autocomplete';\n\n\nconst App: React.FC = () => {\n\n  const [address, setAddress] = useState('')\n  const [localLocalTime, setLocalLocalTime] = useState('')\n  const [backgroundImage, setBackgroundImage] = useState('')\n  const [photographer, setPhotographer] = useState({ username: \"\", profile_image: \"\" })\n\n\n  const [isLoaded, setIsLoaded] = useState<boolean>(false)\n\n  //time\n  const [hours, setHours] = useState(\"0\")\n  const [minutes, setMinutes] = useState(\"0\")\n  const [seconds, setSeconds] = useState(\"0\")\n\n  //current time\n\n  const [currentHours, setCurrentHours] = useState(\"0\")\n  const [currentMinutes, setCurrentMinutes] = useState(\"0\")\n  const [currentSeconds, setCurrentSeconds] = useState(\"0\")\n\n  let [timer, setTimer] = useState<any>(null)\n  let [currentTimer, setCurrentTimer] = useState<any>(null)\n\n\n  const UTC_LONGITUDE = 0\n  const TIME_PER_LONGITUDE = 4\n  const ACCESS_KEY = 'h7eF21T9CT7IP5joCADCvTOxpCL76CDsoDgtBwIkYKg'\n\n  const currentLocationTimer = () => {\n    let currentDate = new Date();\n\n\n\n    const hour = updateTime(currentDate.getHours())\n    const minutes = updateTime(currentDate.getMinutes())\n    const seconds = updateTime(currentDate.getSeconds())\n\n    setCurrentHours(hour)\n    setCurrentMinutes(minutes)\n    setCurrentSeconds(seconds)\n\n    // console.log(`${hour}:${minutes}:${seconds}`)\n\n    setCurrentTimer(setTimeout(() => {\n      currentLocationTimer()\n    }, 1000))\n  }\n\n  useEffect(() => {\n\n    const getRandomBackgroundImage = async () => {\n      const response = await fetch(`https://api.unsplash.com/photos/random?client_id=${ACCESS_KEY}&Accept-Version=v1&content_filter=low`)\n      const resData = await response.json()\n      console.log(resData)\n      setBackgroundImage(resData.urls.regular)\n      setPhotographer({ username: resData.user.username, profile_image: resData.user.profile_image.small })\n\n    }\n    getRandomBackgroundImage()\n    currentLocationTimer()\n    setIsLoaded(true)\n    return () => {\n      clearTimeout(currentTimer);\n      currentTimer = null\n    }\n  },\n    [])\n\n  const handleChange = (address: string) => {\n    setAddress(address)\n  };\n\n  const handleSelect = (address: string) => {\n    if (timer !== null) {\n      // console.log(timer)\n      clearTimeout(timer)\n      timer = null\n    }\n    // console.log(timer)\n    geocodeByAddress(address)\n      .then(results => getLatLng(results[0]))\n      .then(latLng => {\n        //start clock\n        currentTime(latLng.lng)\n      })\n      .catch(error => console.error('Error', error));\n  };\n\n  const updateTime = (k: number) => {\n    if (k < 10) {\n      return \"0\" + k;\n    }\n    else {\n      return k.toString();\n    }\n  }\n\n  const currentTime = (Longitude: number) => {\n\n    let currentDate = new Date();\n\n    let local_tz = ((UTC_LONGITUDE - Longitude) * TIME_PER_LONGITUDE)\n\n    const current_intl_tz = currentDate.getTimezoneOffset()\n    const diff_in_offset = current_intl_tz - local_tz;          // diff = current_tz_offset - (time zone of the selected place)\n\n    let local_time = new Date(currentDate.getTime() + (diff_in_offset * 60 * 1000))\n\n    setLocalLocalTime(local_time.toString().split(\" \").slice(0, 4).join(\" \"))\n\n\n    const hour = updateTime(local_time.getHours())\n    const minutes = updateTime(local_time.getMinutes())\n    const seconds = updateTime(local_time.getSeconds())\n\n    setHours(hour)\n    setMinutes(minutes)\n    setSeconds(seconds)\n\n    // console.log(`${hour}:${minutes}:${seconds}`)\n\n    setTimer(setTimeout(() => {\n      currentTime(Longitude)\n    }, 1000))\n  }\n\n  if (!isLoaded) {\n    return (\n      <div>loading...</div>\n    )\n  }\n\n  return (\n    <div className=\"App\" style={{\n      backgroundImage: `url(${backgroundImage})`, backgroundRepeat: 'no-repeat',\n\n    }}>\n      <h1 className=\"text\">Local Local Time ⌚️</h1>\n      <PlacesAutocomplete\n        value={address}\n        onChange={handleChange}\n        onSelect={handleSelect}\n      >\n        {({ getInputProps, suggestions, getSuggestionItemProps, loading }) =>\n          <div className=\"container\">\n            <input\n              {...getInputProps({\n                placeholder: 'Search Places ...',\n                className: 'location-search-input',\n              })}\n            />\n            <div className=\"autocomplete-dropdown-container\">\n              {loading && <div>Loading...</div>}\n              {suggestions.map(suggestion => {\n                const className = suggestion.active\n                  ? 'suggestion-item--active'\n                  : 'suggestion-item';\n                // inline style for demonstration purpose\n                const style = suggestion.active\n                  ? { backgroundColor: '#ccc', cursor: 'pointer', padding: 10 }\n                  : { backgroundColor: '#fff', cursor: 'pointer', padding: 10 };\n                return (\n                  <div\n                    {...getSuggestionItemProps(suggestion, {\n                      className,\n                      style,\n                    })}\n                  >\n                    <span>{suggestion.description.slice()}</span>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n          // console.log(suggestions)\n        }\n      </PlacesAutocomplete>\n      {hours !== \"0\" && minutes !== \"0\" && seconds !== \"0\" && localLocalTime.length !== 0 && <div className='datetimecontainer'>\n        <h2 className=\"locallocaltimestring\">{localLocalTime}</h2>\n        <h2 className=\"timer\">{hours}:{minutes}:{seconds}</h2>\n      </div>}\n      <h2 className=\"timer\">{currentHours}:{currentMinutes}:{currentSeconds}</h2>\n      <div className=\"footer\">\n        <img src={photographer.profile_image} style={{ borderRadius: 20, marginRight: 10 }} />\n        <a href={`https://unsplash.com/@${photographer.username}`} target=\"_blank\" rel=\"noreferrer\">{photographer.username}</a>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n",{"ruleId":"22","replacedBy":"23"},{"ruleId":"24","replacedBy":"25"},{"ruleId":"26","severity":1,"message":"27","line":9,"column":8,"nodeType":"28","messageId":"29","endLine":9,"endColumn":12},{"ruleId":"26","severity":1,"message":"30","line":11,"column":10,"nodeType":"28","messageId":"29","endLine":11,"endColumn":19},{"ruleId":"31","severity":1,"message":"32","line":84,"column":22,"nodeType":"33","endLine":84,"endColumn":26},{"ruleId":"34","severity":1,"message":"35","line":204,"column":9,"nodeType":"36","endLine":204,"endColumn":95},"no-native-reassign",["37"],"no-negated-in-lhs",["38"],"@typescript-eslint/no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'TextField' is defined but never used.","react-hooks/exhaustive-deps","Assignments to the 'currentTimer' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Literal","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]